// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: rtc/rtc.proto

package rtc

import (
	sdkws "github.com/liserc/openchat-protocol/sdkws"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParticipantMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupInfo       *sdkws.GroupInfo           `protobuf:"bytes,1,opt,name=groupInfo,proto3" json:"groupInfo"`
	GroupMemberInfo *sdkws.GroupMemberFullInfo `protobuf:"bytes,2,opt,name=groupMemberInfo,proto3" json:"groupMemberInfo"`
	UserInfo        *sdkws.PublicUserInfo      `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"userInfo"`
}

func (x *ParticipantMetaData) Reset() {
	*x = ParticipantMetaData{}
	mi := &file_rtc_rtc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantMetaData) ProtoMessage() {}

func (x *ParticipantMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantMetaData.ProtoReflect.Descriptor instead.
func (*ParticipantMetaData) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{0}
}

func (x *ParticipantMetaData) GetGroupInfo() *sdkws.GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *ParticipantMetaData) GetGroupMemberInfo() *sdkws.GroupMemberFullInfo {
	if x != nil {
		return x.GroupMemberInfo
	}
	return nil
}

func (x *ParticipantMetaData) GetUserInfo() *sdkws.PublicUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type GetJoinTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room     string               `protobuf:"bytes,1,opt,name=room,proto3" json:"room"`
	Identity string               `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity"`
	MetaData *ParticipantMetaData `protobuf:"bytes,3,opt,name=metaData,proto3" json:"metaData"`
}

func (x *GetJoinTokenReq) Reset() {
	*x = GetJoinTokenReq{}
	mi := &file_rtc_rtc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJoinTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinTokenReq) ProtoMessage() {}

func (x *GetJoinTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinTokenReq.ProtoReflect.Descriptor instead.
func (*GetJoinTokenReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{1}
}

func (x *GetJoinTokenReq) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *GetJoinTokenReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *GetJoinTokenReq) GetMetaData() *ParticipantMetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type GetJoinTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt     string `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt"`
	LiveURL string `protobuf:"bytes,2,opt,name=liveURL,proto3" json:"liveURL"`
}

func (x *GetJoinTokenResp) Reset() {
	*x = GetJoinTokenResp{}
	mi := &file_rtc_rtc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJoinTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinTokenResp) ProtoMessage() {}

func (x *GetJoinTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinTokenResp.ProtoReflect.Descriptor instead.
func (*GetJoinTokenResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{2}
}

func (x *GetJoinTokenResp) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *GetJoinTokenResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

type SignalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*SignalReq_Invite
	//	*SignalReq_InviteInGroup
	//	*SignalReq_Cancel
	//	*SignalReq_Accept
	//	*SignalReq_HungUp
	//	*SignalReq_Reject
	//	*SignalReq_GetTokenByRoomID
	Payload isSignalReq_Payload `protobuf_oneof:"payload"`
}

func (x *SignalReq) Reset() {
	*x = SignalReq{}
	mi := &file_rtc_rtc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalReq) ProtoMessage() {}

func (x *SignalReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalReq.ProtoReflect.Descriptor instead.
func (*SignalReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{3}
}

func (m *SignalReq) GetPayload() isSignalReq_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SignalReq) GetInvite() *SignalInviteReq {
	if x, ok := x.GetPayload().(*SignalReq_Invite); ok {
		return x.Invite
	}
	return nil
}

func (x *SignalReq) GetInviteInGroup() *SignalInviteInGroupReq {
	if x, ok := x.GetPayload().(*SignalReq_InviteInGroup); ok {
		return x.InviteInGroup
	}
	return nil
}

func (x *SignalReq) GetCancel() *SignalCancelReq {
	if x, ok := x.GetPayload().(*SignalReq_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *SignalReq) GetAccept() *SignalAcceptReq {
	if x, ok := x.GetPayload().(*SignalReq_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *SignalReq) GetHungUp() *SignalHungUpReq {
	if x, ok := x.GetPayload().(*SignalReq_HungUp); ok {
		return x.HungUp
	}
	return nil
}

func (x *SignalReq) GetReject() *SignalRejectReq {
	if x, ok := x.GetPayload().(*SignalReq_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *SignalReq) GetGetTokenByRoomID() *SignalGetTokenByRoomIDReq {
	if x, ok := x.GetPayload().(*SignalReq_GetTokenByRoomID); ok {
		return x.GetTokenByRoomID
	}
	return nil
}

type isSignalReq_Payload interface {
	isSignalReq_Payload()
}

type SignalReq_Invite struct {
	Invite *SignalInviteReq `protobuf:"bytes,1,opt,name=invite,proto3,oneof"`
}

type SignalReq_InviteInGroup struct {
	InviteInGroup *SignalInviteInGroupReq `protobuf:"bytes,2,opt,name=inviteInGroup,proto3,oneof"`
}

type SignalReq_Cancel struct {
	Cancel *SignalCancelReq `protobuf:"bytes,3,opt,name=cancel,proto3,oneof"`
}

type SignalReq_Accept struct {
	Accept *SignalAcceptReq `protobuf:"bytes,4,opt,name=accept,proto3,oneof"`
}

type SignalReq_HungUp struct {
	HungUp *SignalHungUpReq `protobuf:"bytes,5,opt,name=hungUp,proto3,oneof"`
}

type SignalReq_Reject struct {
	Reject *SignalRejectReq `protobuf:"bytes,6,opt,name=reject,proto3,oneof"`
}

type SignalReq_GetTokenByRoomID struct {
	GetTokenByRoomID *SignalGetTokenByRoomIDReq `protobuf:"bytes,7,opt,name=getTokenByRoomID,proto3,oneof"`
}

func (*SignalReq_Invite) isSignalReq_Payload() {}

func (*SignalReq_InviteInGroup) isSignalReq_Payload() {}

func (*SignalReq_Cancel) isSignalReq_Payload() {}

func (*SignalReq_Accept) isSignalReq_Payload() {}

func (*SignalReq_HungUp) isSignalReq_Payload() {}

func (*SignalReq_Reject) isSignalReq_Payload() {}

func (*SignalReq_GetTokenByRoomID) isSignalReq_Payload() {}

type SignalSendCustomSignalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID     string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
	CustomInfo string `protobuf:"bytes,2,opt,name=customInfo,proto3" json:"customInfo"`
}

func (x *SignalSendCustomSignalReq) Reset() {
	*x = SignalSendCustomSignalReq{}
	mi := &file_rtc_rtc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalSendCustomSignalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSendCustomSignalReq) ProtoMessage() {}

func (x *SignalSendCustomSignalReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSendCustomSignalReq.ProtoReflect.Descriptor instead.
func (*SignalSendCustomSignalReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{4}
}

func (x *SignalSendCustomSignalReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalSendCustomSignalReq) GetCustomInfo() string {
	if x != nil {
		return x.CustomInfo
	}
	return ""
}

type SignalSendCustomSignalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalSendCustomSignalResp) Reset() {
	*x = SignalSendCustomSignalResp{}
	mi := &file_rtc_rtc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalSendCustomSignalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSendCustomSignalResp) ProtoMessage() {}

func (x *SignalSendCustomSignalResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSendCustomSignalResp.ProtoReflect.Descriptor instead.
func (*SignalSendCustomSignalResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{5}
}

type SignalOnStreamChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID     string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
	StreamType string `protobuf:"bytes,2,opt,name=streamType,proto3" json:"streamType"`
	Mute       bool   `protobuf:"varint,3,opt,name=mute,proto3" json:"mute"`
}

func (x *SignalOnStreamChangeReq) Reset() {
	*x = SignalOnStreamChangeReq{}
	mi := &file_rtc_rtc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalOnStreamChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOnStreamChangeReq) ProtoMessage() {}

func (x *SignalOnStreamChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOnStreamChangeReq.ProtoReflect.Descriptor instead.
func (*SignalOnStreamChangeReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{6}
}

func (x *SignalOnStreamChangeReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalOnStreamChangeReq) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

func (x *SignalOnStreamChangeReq) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

type SignalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*SignalResp_Invite
	//	*SignalResp_InviteInGroup
	//	*SignalResp_Cancel
	//	*SignalResp_Accept
	//	*SignalResp_HungUp
	//	*SignalResp_Reject
	//	*SignalResp_GetTokenByRoomID
	Payload isSignalResp_Payload `protobuf_oneof:"payload"`
}

func (x *SignalResp) Reset() {
	*x = SignalResp{}
	mi := &file_rtc_rtc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalResp) ProtoMessage() {}

func (x *SignalResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalResp.ProtoReflect.Descriptor instead.
func (*SignalResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{7}
}

func (m *SignalResp) GetPayload() isSignalResp_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SignalResp) GetInvite() *SignalInviteResp {
	if x, ok := x.GetPayload().(*SignalResp_Invite); ok {
		return x.Invite
	}
	return nil
}

func (x *SignalResp) GetInviteInGroup() *SignalInviteInGroupResp {
	if x, ok := x.GetPayload().(*SignalResp_InviteInGroup); ok {
		return x.InviteInGroup
	}
	return nil
}

func (x *SignalResp) GetCancel() *SignalCancelResp {
	if x, ok := x.GetPayload().(*SignalResp_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *SignalResp) GetAccept() *SignalAcceptResp {
	if x, ok := x.GetPayload().(*SignalResp_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *SignalResp) GetHungUp() *SignalHungUpResp {
	if x, ok := x.GetPayload().(*SignalResp_HungUp); ok {
		return x.HungUp
	}
	return nil
}

func (x *SignalResp) GetReject() *SignalRejectResp {
	if x, ok := x.GetPayload().(*SignalResp_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *SignalResp) GetGetTokenByRoomID() *SignalGetTokenByRoomIDResp {
	if x, ok := x.GetPayload().(*SignalResp_GetTokenByRoomID); ok {
		return x.GetTokenByRoomID
	}
	return nil
}

type isSignalResp_Payload interface {
	isSignalResp_Payload()
}

type SignalResp_Invite struct {
	Invite *SignalInviteResp `protobuf:"bytes,1,opt,name=invite,proto3,oneof"`
}

type SignalResp_InviteInGroup struct {
	InviteInGroup *SignalInviteInGroupResp `protobuf:"bytes,2,opt,name=inviteInGroup,proto3,oneof"`
}

type SignalResp_Cancel struct {
	Cancel *SignalCancelResp `protobuf:"bytes,3,opt,name=cancel,proto3,oneof"`
}

type SignalResp_Accept struct {
	Accept *SignalAcceptResp `protobuf:"bytes,4,opt,name=accept,proto3,oneof"`
}

type SignalResp_HungUp struct {
	HungUp *SignalHungUpResp `protobuf:"bytes,5,opt,name=hungUp,proto3,oneof"`
}

type SignalResp_Reject struct {
	Reject *SignalRejectResp `protobuf:"bytes,6,opt,name=reject,proto3,oneof"`
}

type SignalResp_GetTokenByRoomID struct {
	GetTokenByRoomID *SignalGetTokenByRoomIDResp `protobuf:"bytes,7,opt,name=getTokenByRoomID,proto3,oneof"`
}

func (*SignalResp_Invite) isSignalResp_Payload() {}

func (*SignalResp_InviteInGroup) isSignalResp_Payload() {}

func (*SignalResp_Cancel) isSignalResp_Payload() {}

func (*SignalResp_Accept) isSignalResp_Payload() {}

func (*SignalResp_HungUp) isSignalResp_Payload() {}

func (*SignalResp_Reject) isSignalResp_Payload() {}

func (*SignalResp_GetTokenByRoomID) isSignalResp_Payload() {}

type InvitationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviterUserID      string   `protobuf:"bytes,1,opt,name=inviterUserID,proto3" json:"inviterUserID"`
	InviteeUserIDList  []string `protobuf:"bytes,2,rep,name=inviteeUserIDList,proto3" json:"inviteeUserIDList"`
	CustomData         string   `protobuf:"bytes,3,opt,name=customData,proto3" json:"customData"`
	GroupID            string   `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID"`
	RoomID             string   `protobuf:"bytes,5,opt,name=roomID,proto3" json:"roomID"`
	Timeout            int32    `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout"`
	MediaType          string   `protobuf:"bytes,7,opt,name=mediaType,proto3" json:"mediaType"`
	PlatformID         int32    `protobuf:"varint,8,opt,name=platformID,proto3" json:"platformID"`
	SessionType        int32    `protobuf:"varint,9,opt,name=sessionType,proto3" json:"sessionType"`
	InitiateTime       int64    `protobuf:"varint,10,opt,name=initiateTime,proto3" json:"initiateTime"`
	BusyLineUserIDList []string `protobuf:"bytes,11,rep,name=busyLineUserIDList,proto3" json:"busyLineUserIDList"`
}

func (x *InvitationInfo) Reset() {
	*x = InvitationInfo{}
	mi := &file_rtc_rtc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvitationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationInfo) ProtoMessage() {}

func (x *InvitationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationInfo.ProtoReflect.Descriptor instead.
func (*InvitationInfo) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{8}
}

func (x *InvitationInfo) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

func (x *InvitationInfo) GetInviteeUserIDList() []string {
	if x != nil {
		return x.InviteeUserIDList
	}
	return nil
}

func (x *InvitationInfo) GetCustomData() string {
	if x != nil {
		return x.CustomData
	}
	return ""
}

func (x *InvitationInfo) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *InvitationInfo) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *InvitationInfo) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *InvitationInfo) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *InvitationInfo) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *InvitationInfo) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *InvitationInfo) GetInitiateTime() int64 {
	if x != nil {
		return x.InitiateTime
	}
	return 0
}

func (x *InvitationInfo) GetBusyLineUserIDList() []string {
	if x != nil {
		return x.BusyLineUserIDList
	}
	return nil
}

type SignalInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant     *ParticipantMetaData   `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	UserID          string                 `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalInviteReq) Reset() {
	*x = SignalInviteReq{}
	mi := &file_rtc_rtc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteReq) ProtoMessage() {}

func (x *SignalInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteReq.ProtoReflect.Descriptor instead.
func (*SignalInviteReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{9}
}

func (x *SignalInviteReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalInviteReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalInviteReq) GetParticipant() *ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalInviteReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalInviteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	RoomID             string   `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID"`
	LiveURL            string   `protobuf:"bytes,3,opt,name=liveURL,proto3" json:"liveURL"`
	BusyLineUserIDList []string `protobuf:"bytes,4,rep,name=busyLineUserIDList,proto3" json:"busyLineUserIDList"`
}

func (x *SignalInviteResp) Reset() {
	*x = SignalInviteResp{}
	mi := &file_rtc_rtc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalInviteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteResp) ProtoMessage() {}

func (x *SignalInviteResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteResp.ProtoReflect.Descriptor instead.
func (*SignalInviteResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{10}
}

func (x *SignalInviteResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalInviteResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalInviteResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

func (x *SignalInviteResp) GetBusyLineUserIDList() []string {
	if x != nil {
		return x.BusyLineUserIDList
	}
	return nil
}

type SignalInviteInGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant     *ParticipantMetaData   `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	UserID          string                 `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalInviteInGroupReq) Reset() {
	*x = SignalInviteInGroupReq{}
	mi := &file_rtc_rtc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalInviteInGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteInGroupReq) ProtoMessage() {}

func (x *SignalInviteInGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteInGroupReq.ProtoReflect.Descriptor instead.
func (*SignalInviteInGroupReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{11}
}

func (x *SignalInviteInGroupReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalInviteInGroupReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalInviteInGroupReq) GetParticipant() *ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalInviteInGroupReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalInviteInGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	RoomID             string   `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID"`
	LiveURL            string   `protobuf:"bytes,3,opt,name=liveURL,proto3" json:"liveURL"`
	BusyLineUserIDList []string `protobuf:"bytes,4,rep,name=busyLineUserIDList,proto3" json:"busyLineUserIDList"`
}

func (x *SignalInviteInGroupResp) Reset() {
	*x = SignalInviteInGroupResp{}
	mi := &file_rtc_rtc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalInviteInGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInviteInGroupResp) ProtoMessage() {}

func (x *SignalInviteInGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInviteInGroupResp.ProtoReflect.Descriptor instead.
func (*SignalInviteInGroupResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{12}
}

func (x *SignalInviteInGroupResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalInviteInGroupResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalInviteInGroupResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

func (x *SignalInviteInGroupResp) GetBusyLineUserIDList() []string {
	if x != nil {
		return x.BusyLineUserIDList
	}
	return nil
}

type SignalCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant     *ParticipantMetaData   `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	UserID          string                 `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalCancelReq) Reset() {
	*x = SignalCancelReq{}
	mi := &file_rtc_rtc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalCancelReq) ProtoMessage() {}

func (x *SignalCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalCancelReq.ProtoReflect.Descriptor instead.
func (*SignalCancelReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{13}
}

func (x *SignalCancelReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalCancelReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalCancelReq) GetParticipant() *ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalCancelReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalCancelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalCancelResp) Reset() {
	*x = SignalCancelResp{}
	mi := &file_rtc_rtc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalCancelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalCancelResp) ProtoMessage() {}

func (x *SignalCancelResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalCancelResp.ProtoReflect.Descriptor instead.
func (*SignalCancelResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{14}
}

type SignalAcceptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation       *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo  *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant      *ParticipantMetaData   `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	OpUserPlatformID int32                  `protobuf:"varint,4,opt,name=opUserPlatformID,proto3" json:"opUserPlatformID"`
	UserID           string                 `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalAcceptReq) Reset() {
	*x = SignalAcceptReq{}
	mi := &file_rtc_rtc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalAcceptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalAcceptReq) ProtoMessage() {}

func (x *SignalAcceptReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalAcceptReq.ProtoReflect.Descriptor instead.
func (*SignalAcceptReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{15}
}

func (x *SignalAcceptReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalAcceptReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalAcceptReq) GetParticipant() *ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalAcceptReq) GetOpUserPlatformID() int32 {
	if x != nil {
		return x.OpUserPlatformID
	}
	return 0
}

func (x *SignalAcceptReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalAcceptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	RoomID  string `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID"`
	LiveURL string `protobuf:"bytes,3,opt,name=liveURL,proto3" json:"liveURL"`
}

func (x *SignalAcceptResp) Reset() {
	*x = SignalAcceptResp{}
	mi := &file_rtc_rtc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalAcceptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalAcceptResp) ProtoMessage() {}

func (x *SignalAcceptResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalAcceptResp.ProtoReflect.Descriptor instead.
func (*SignalAcceptResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{16}
}

func (x *SignalAcceptResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalAcceptResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalAcceptResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

type SignalHungUpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	UserID          string                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalHungUpReq) Reset() {
	*x = SignalHungUpReq{}
	mi := &file_rtc_rtc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalHungUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalHungUpReq) ProtoMessage() {}

func (x *SignalHungUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalHungUpReq.ProtoReflect.Descriptor instead.
func (*SignalHungUpReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{17}
}

func (x *SignalHungUpReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalHungUpReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalHungUpReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalHungUpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalHungUpResp) Reset() {
	*x = SignalHungUpResp{}
	mi := &file_rtc_rtc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalHungUpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalHungUpResp) ProtoMessage() {}

func (x *SignalHungUpResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalHungUpResp.ProtoReflect.Descriptor instead.
func (*SignalHungUpResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{18}
}

type SignalRejectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation       *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo  *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
	Participant      *ParticipantMetaData   `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant"`
	OpUserPlatformID int32                  `protobuf:"varint,4,opt,name=opUserPlatformID,proto3" json:"opUserPlatformID"`
	UserID           string                 `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalRejectReq) Reset() {
	*x = SignalRejectReq{}
	mi := &file_rtc_rtc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalRejectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRejectReq) ProtoMessage() {}

func (x *SignalRejectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRejectReq.ProtoReflect.Descriptor instead.
func (*SignalRejectReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{19}
}

func (x *SignalRejectReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalRejectReq) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

func (x *SignalRejectReq) GetParticipant() *ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalRejectReq) GetOpUserPlatformID() int32 {
	if x != nil {
		return x.OpUserPlatformID
	}
	return 0
}

func (x *SignalRejectReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalRejectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalRejectResp) Reset() {
	*x = SignalRejectResp{}
	mi := &file_rtc_rtc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalRejectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRejectResp) ProtoMessage() {}

func (x *SignalRejectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRejectResp.ProtoReflect.Descriptor instead.
func (*SignalRejectResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{20}
}

type SignalGetRoomByGroupIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID"`
}

func (x *SignalGetRoomByGroupIDReq) Reset() {
	*x = SignalGetRoomByGroupIDReq{}
	mi := &file_rtc_rtc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalGetRoomByGroupIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomByGroupIDReq) ProtoMessage() {}

func (x *SignalGetRoomByGroupIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomByGroupIDReq.ProtoReflect.Descriptor instead.
func (*SignalGetRoomByGroupIDReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{21}
}

func (x *SignalGetRoomByGroupIDReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type SignalGetRoomByGroupIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation  *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	Participant []*ParticipantMetaData `protobuf:"bytes,2,rep,name=participant,proto3" json:"participant"`
	RoomID      string                 `protobuf:"bytes,3,opt,name=roomID,proto3" json:"roomID"`
}

func (x *SignalGetRoomByGroupIDResp) Reset() {
	*x = SignalGetRoomByGroupIDResp{}
	mi := &file_rtc_rtc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalGetRoomByGroupIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomByGroupIDResp) ProtoMessage() {}

func (x *SignalGetRoomByGroupIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomByGroupIDResp.ProtoReflect.Descriptor instead.
func (*SignalGetRoomByGroupIDResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{22}
}

func (x *SignalGetRoomByGroupIDResp) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalGetRoomByGroupIDResp) GetParticipant() []*ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalGetRoomByGroupIDResp) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

type SignalOnRoomParticipantConnectedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation  *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	Participant []*ParticipantMetaData `protobuf:"bytes,2,rep,name=participant,proto3" json:"participant"`
	GroupID     string                 `protobuf:"bytes,3,opt,name=groupID,proto3" json:"groupID"`
}

func (x *SignalOnRoomParticipantConnectedReq) Reset() {
	*x = SignalOnRoomParticipantConnectedReq{}
	mi := &file_rtc_rtc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalOnRoomParticipantConnectedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOnRoomParticipantConnectedReq) ProtoMessage() {}

func (x *SignalOnRoomParticipantConnectedReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOnRoomParticipantConnectedReq.ProtoReflect.Descriptor instead.
func (*SignalOnRoomParticipantConnectedReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{23}
}

func (x *SignalOnRoomParticipantConnectedReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalOnRoomParticipantConnectedReq) GetParticipant() []*ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalOnRoomParticipantConnectedReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type SignalOnRoomParticipantDisconnectedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation  *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	Participant []*ParticipantMetaData `protobuf:"bytes,2,rep,name=participant,proto3" json:"participant"`
	GroupID     string                 `protobuf:"bytes,3,opt,name=groupID,proto3" json:"groupID"`
}

func (x *SignalOnRoomParticipantDisconnectedReq) Reset() {
	*x = SignalOnRoomParticipantDisconnectedReq{}
	mi := &file_rtc_rtc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalOnRoomParticipantDisconnectedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOnRoomParticipantDisconnectedReq) ProtoMessage() {}

func (x *SignalOnRoomParticipantDisconnectedReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOnRoomParticipantDisconnectedReq.ProtoReflect.Descriptor instead.
func (*SignalOnRoomParticipantDisconnectedReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{24}
}

func (x *SignalOnRoomParticipantDisconnectedReq) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *SignalOnRoomParticipantDisconnectedReq) GetParticipant() []*ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalOnRoomParticipantDisconnectedReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type SignalGetTokenByRoomIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID      string               `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
	Participant *ParticipantMetaData `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant"`
	UserID      string               `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`
}

func (x *SignalGetTokenByRoomIDReq) Reset() {
	*x = SignalGetTokenByRoomIDReq{}
	mi := &file_rtc_rtc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalGetTokenByRoomIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetTokenByRoomIDReq) ProtoMessage() {}

func (x *SignalGetTokenByRoomIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetTokenByRoomIDReq.ProtoReflect.Descriptor instead.
func (*SignalGetTokenByRoomIDReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{25}
}

func (x *SignalGetTokenByRoomIDReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalGetTokenByRoomIDReq) GetParticipant() *ParticipantMetaData {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *SignalGetTokenByRoomIDReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SignalGetTokenByRoomIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	LiveURL string `protobuf:"bytes,2,opt,name=liveURL,proto3" json:"liveURL"`
}

func (x *SignalGetTokenByRoomIDResp) Reset() {
	*x = SignalGetTokenByRoomIDResp{}
	mi := &file_rtc_rtc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalGetTokenByRoomIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetTokenByRoomIDResp) ProtoMessage() {}

func (x *SignalGetTokenByRoomIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetTokenByRoomIDResp.ProtoReflect.Descriptor instead.
func (*SignalGetTokenByRoomIDResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{26}
}

func (x *SignalGetTokenByRoomIDResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignalGetTokenByRoomIDResp) GetLiveURL() string {
	if x != nil {
		return x.LiveURL
	}
	return ""
}

type SignalMessageAssembleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalReq *SignalReq `protobuf:"bytes,1,opt,name=signalReq,proto3" json:"signalReq"`
}

func (x *SignalMessageAssembleReq) Reset() {
	*x = SignalMessageAssembleReq{}
	mi := &file_rtc_rtc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalMessageAssembleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalMessageAssembleReq) ProtoMessage() {}

func (x *SignalMessageAssembleReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalMessageAssembleReq.ProtoReflect.Descriptor instead.
func (*SignalMessageAssembleReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{27}
}

func (x *SignalMessageAssembleReq) GetSignalReq() *SignalReq {
	if x != nil {
		return x.SignalReq
	}
	return nil
}

type SignalMessageAssembleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalResp *SignalResp `protobuf:"bytes,1,opt,name=signalResp,proto3" json:"signalResp"`
}

func (x *SignalMessageAssembleResp) Reset() {
	*x = SignalMessageAssembleResp{}
	mi := &file_rtc_rtc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalMessageAssembleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalMessageAssembleResp) ProtoMessage() {}

func (x *SignalMessageAssembleResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalMessageAssembleResp.ProtoReflect.Descriptor instead.
func (*SignalMessageAssembleResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{28}
}

func (x *SignalMessageAssembleResp) GetSignalResp() *SignalResp {
	if x != nil {
		return x.SignalResp
	}
	return nil
}

type SignalGetRoomsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomIDs []string `protobuf:"bytes,1,rep,name=roomIDs,proto3" json:"roomIDs"`
}

func (x *SignalGetRoomsReq) Reset() {
	*x = SignalGetRoomsReq{}
	mi := &file_rtc_rtc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalGetRoomsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomsReq) ProtoMessage() {}

func (x *SignalGetRoomsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomsReq.ProtoReflect.Descriptor instead.
func (*SignalGetRoomsReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{29}
}

func (x *SignalGetRoomsReq) GetRoomIDs() []string {
	if x != nil {
		return x.RoomIDs
	}
	return nil
}

type SignalGetRoomsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomList []*SignalGetRoomByGroupIDResp `protobuf:"bytes,1,rep,name=roomList,proto3" json:"roomList"`
}

func (x *SignalGetRoomsResp) Reset() {
	*x = SignalGetRoomsResp{}
	mi := &file_rtc_rtc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalGetRoomsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGetRoomsResp) ProtoMessage() {}

func (x *SignalGetRoomsResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGetRoomsResp.ProtoReflect.Descriptor instead.
func (*SignalGetRoomsResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{30}
}

func (x *SignalGetRoomsResp) GetRoomList() []*SignalGetRoomByGroupIDResp {
	if x != nil {
		return x.RoomList
	}
	return nil
}

type GetSignalInvitationInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
}

func (x *GetSignalInvitationInfoReq) Reset() {
	*x = GetSignalInvitationInfoReq{}
	mi := &file_rtc_rtc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalInvitationInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoReq) ProtoMessage() {}

func (x *GetSignalInvitationInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoReq.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{31}
}

func (x *GetSignalInvitationInfoReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

type GetSignalInvitationInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationInfo  *InvitationInfo        `protobuf:"bytes,1,opt,name=invitationInfo,proto3" json:"invitationInfo"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
}

func (x *GetSignalInvitationInfoResp) Reset() {
	*x = GetSignalInvitationInfoResp{}
	mi := &file_rtc_rtc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalInvitationInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoResp) ProtoMessage() {}

func (x *GetSignalInvitationInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoResp.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{32}
}

func (x *GetSignalInvitationInfoResp) GetInvitationInfo() *InvitationInfo {
	if x != nil {
		return x.InvitationInfo
	}
	return nil
}

func (x *GetSignalInvitationInfoResp) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

type GetSignalInvitationInfoStartAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
}

func (x *GetSignalInvitationInfoStartAppReq) Reset() {
	*x = GetSignalInvitationInfoStartAppReq{}
	mi := &file_rtc_rtc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalInvitationInfoStartAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoStartAppReq) ProtoMessage() {}

func (x *GetSignalInvitationInfoStartAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoStartAppReq.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoStartAppReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{33}
}

func (x *GetSignalInvitationInfoStartAppReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetSignalInvitationInfoStartAppResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invitation      *InvitationInfo        `protobuf:"bytes,1,opt,name=invitation,proto3" json:"invitation"`
	OfflinePushInfo *sdkws.OfflinePushInfo `protobuf:"bytes,2,opt,name=offlinePushInfo,proto3" json:"offlinePushInfo"`
}

func (x *GetSignalInvitationInfoStartAppResp) Reset() {
	*x = GetSignalInvitationInfoStartAppResp{}
	mi := &file_rtc_rtc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalInvitationInfoStartAppResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationInfoStartAppResp) ProtoMessage() {}

func (x *GetSignalInvitationInfoStartAppResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationInfoStartAppResp.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationInfoStartAppResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{34}
}

func (x *GetSignalInvitationInfoStartAppResp) GetInvitation() *InvitationInfo {
	if x != nil {
		return x.Invitation
	}
	return nil
}

func (x *GetSignalInvitationInfoStartAppResp) GetOfflinePushInfo() *sdkws.OfflinePushInfo {
	if x != nil {
		return x.OfflinePushInfo
	}
	return nil
}

type SignalUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	Status   int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
}

func (x *SignalUser) Reset() {
	*x = SignalUser{}
	mi := &file_rtc_rtc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUser) ProtoMessage() {}

func (x *SignalUser) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUser.ProtoReflect.Descriptor instead.
func (*SignalUser) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{35}
}

func (x *SignalUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SignalUser) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SignalUser) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SignalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID              string        `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID"`
	SID                 string        `protobuf:"bytes,2,opt,name=sID,proto3" json:"sID"`
	FileName            string        `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName"`
	MediaType           string        `protobuf:"bytes,4,opt,name=mediaType,proto3" json:"mediaType"`
	SessionType         int32         `protobuf:"varint,5,opt,name=sessionType,proto3" json:"sessionType"`
	InviterUserID       string        `protobuf:"bytes,6,opt,name=inviterUserID,proto3" json:"inviterUserID"`
	InviterUserNickname string        `protobuf:"bytes,7,opt,name=inviterUserNickname,proto3" json:"inviterUserNickname"`
	GroupID             string        `protobuf:"bytes,8,opt,name=groupID,proto3" json:"groupID"`
	GroupName           string        `protobuf:"bytes,9,opt,name=groupName,proto3" json:"groupName"`
	InviterUsers        []*SignalUser `protobuf:"bytes,10,rep,name=inviterUsers,proto3" json:"inviterUsers"`
	CreateTime          int64         `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	EndTime             int64         `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime"`
	Size                string        `protobuf:"bytes,13,opt,name=size,proto3" json:"size"`
	FileURL             string        `protobuf:"bytes,14,opt,name=fileURL,proto3" json:"fileURL"`
}

func (x *SignalRecord) Reset() {
	*x = SignalRecord{}
	mi := &file_rtc_rtc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRecord) ProtoMessage() {}

func (x *SignalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRecord.ProtoReflect.Descriptor instead.
func (*SignalRecord) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{36}
}

func (x *SignalRecord) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SignalRecord) GetSID() string {
	if x != nil {
		return x.SID
	}
	return ""
}

func (x *SignalRecord) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SignalRecord) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *SignalRecord) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *SignalRecord) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

func (x *SignalRecord) GetInviterUserNickname() string {
	if x != nil {
		return x.InviterUserNickname
	}
	return ""
}

func (x *SignalRecord) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *SignalRecord) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *SignalRecord) GetInviterUsers() []*SignalUser {
	if x != nil {
		return x.InviterUsers
	}
	return nil
}

func (x *SignalRecord) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SignalRecord) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SignalRecord) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *SignalRecord) GetFileURL() string {
	if x != nil {
		return x.FileURL
	}
	return ""
}

type FileRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    string `protobuf:"bytes,1,opt,name=size,proto3" json:"size"`
	FileURL string `protobuf:"bytes,2,opt,name=fileURL,proto3" json:"fileURL"`
}

func (x *FileRecord) Reset() {
	*x = FileRecord{}
	mi := &file_rtc_rtc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRecord) ProtoMessage() {}

func (x *FileRecord) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRecord.ProtoReflect.Descriptor instead.
func (*FileRecord) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{37}
}

func (x *FileRecord) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *FileRecord) GetFileURL() string {
	if x != nil {
		return x.FileURL
	}
	return ""
}

type GetSignalInvitationRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination  *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
	SessionType int32                    `protobuf:"varint,2,opt,name=sessionType,proto3" json:"sessionType"`
	SendID      string                   `protobuf:"bytes,3,opt,name=sendID,proto3" json:"sendID"`
	RecvID      string                   `protobuf:"bytes,4,opt,name=recvID,proto3" json:"recvID"`
	StartTime   int64                    `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime"`
	EndTime     int64                    `protobuf:"varint,6,opt,name=endTime,proto3" json:"endTime"`
	JoinedUsers []*sdkws.UserInfo        `protobuf:"bytes,7,rep,name=JoinedUsers,proto3" json:"JoinedUsers"`
}

func (x *GetSignalInvitationRecordsReq) Reset() {
	*x = GetSignalInvitationRecordsReq{}
	mi := &file_rtc_rtc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalInvitationRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationRecordsReq) ProtoMessage() {}

func (x *GetSignalInvitationRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationRecordsReq.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationRecordsReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{38}
}

func (x *GetSignalInvitationRecordsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetSignalInvitationRecordsReq) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *GetSignalInvitationRecordsReq) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *GetSignalInvitationRecordsReq) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *GetSignalInvitationRecordsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetSignalInvitationRecordsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetSignalInvitationRecordsReq) GetJoinedUsers() []*sdkws.UserInfo {
	if x != nil {
		return x.JoinedUsers
	}
	return nil
}

type GetSignalInvitationRecordsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         int32           `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	SignalRecords []*SignalRecord `protobuf:"bytes,2,rep,name=signalRecords,proto3" json:"signalRecords"`
}

func (x *GetSignalInvitationRecordsResp) Reset() {
	*x = GetSignalInvitationRecordsResp{}
	mi := &file_rtc_rtc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalInvitationRecordsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalInvitationRecordsResp) ProtoMessage() {}

func (x *GetSignalInvitationRecordsResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalInvitationRecordsResp.ProtoReflect.Descriptor instead.
func (*GetSignalInvitationRecordsResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{39}
}

func (x *GetSignalInvitationRecordsResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSignalInvitationRecordsResp) GetSignalRecords() []*SignalRecord {
	if x != nil {
		return x.SignalRecords
	}
	return nil
}

type DeleteSignalRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SIDs []string `protobuf:"bytes,1,rep,name=sIDs,proto3" json:"sIDs"`
}

func (x *DeleteSignalRecordsReq) Reset() {
	*x = DeleteSignalRecordsReq{}
	mi := &file_rtc_rtc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSignalRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSignalRecordsReq) ProtoMessage() {}

func (x *DeleteSignalRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSignalRecordsReq.ProtoReflect.Descriptor instead.
func (*DeleteSignalRecordsReq) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteSignalRecordsReq) GetSIDs() []string {
	if x != nil {
		return x.SIDs
	}
	return nil
}

type DeleteSignalRecordsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSignalRecordsResp) Reset() {
	*x = DeleteSignalRecordsResp{}
	mi := &file_rtc_rtc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSignalRecordsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSignalRecordsResp) ProtoMessage() {}

func (x *DeleteSignalRecordsResp) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_rtc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSignalRecordsResp.ProtoReflect.Descriptor instead.
func (*DeleteSignalRecordsResp) Descriptor() ([]byte, []int) {
	return file_rtc_rtc_proto_rawDescGZIP(), []int{41}
}

var File_rtc_rtc_proto protoreflect.FileDescriptor

var file_rtc_rtc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x74, 0x63, 0x2f, 0x72, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x1a, 0x11, 0x73,
	0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd9, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4d, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x22,
	0xd8, 0x03, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a,
	0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x37, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x68, 0x75, 0x6e, 0x67, 0x55, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x75, 0x6e, 0x67,
	0x55, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x68, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x12,
	0x37, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x10, 0x67,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x53, 0x0a, 0x19, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x1c, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x65, 0x0a,
	0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6d, 0x75, 0x74, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72,
	0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x4d, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x68, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x48, 0x00, 0x52, 0x06, 0x68, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73, 0x79,
	0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf7,
	0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x76, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69, 0x6e,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75,
	0x73, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73, 0x79, 0x4c, 0x69, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0f, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x3c,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5a,
	0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3c,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x12, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x75, 0x6e, 0x67, 0x55, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x72, 0x74, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x35, 0x0a,
	0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0xc2,
	0x01, 0x0a, 0x23, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x22, 0xc5, 0x01, 0x0a, 0x26, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x3c,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x90, 0x01, 0x0a, 0x19,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x44, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4c,
	0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x51, 0x0a, 0x18,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x22,
	0x55, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a,
	0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xae, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xca, 0x03, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x3a,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x22, 0xa8, 0x02, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x76, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x78, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x49, 0x44, 0x73, 0x22, 0x19, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe8, 0x07, 0x0a, 0x0a, 0x52, 0x74, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6b, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b,
	0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x1f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x72, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x86, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x70, 0x70, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72,
	0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x62, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x72, 0x74, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rtc_rtc_proto_rawDescOnce sync.Once
	file_rtc_rtc_proto_rawDescData = file_rtc_rtc_proto_rawDesc
)

func file_rtc_rtc_proto_rawDescGZIP() []byte {
	file_rtc_rtc_proto_rawDescOnce.Do(func() {
		file_rtc_rtc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtc_rtc_proto_rawDescData)
	})
	return file_rtc_rtc_proto_rawDescData
}

var file_rtc_rtc_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_rtc_rtc_proto_goTypes = []any{
	(*ParticipantMetaData)(nil),                    // 0: openchat.rtc.ParticipantMetaData
	(*GetJoinTokenReq)(nil),                        // 1: openchat.rtc.GetJoinTokenReq
	(*GetJoinTokenResp)(nil),                       // 2: openchat.rtc.GetJoinTokenResp
	(*SignalReq)(nil),                              // 3: openchat.rtc.SignalReq
	(*SignalSendCustomSignalReq)(nil),              // 4: openchat.rtc.SignalSendCustomSignalReq
	(*SignalSendCustomSignalResp)(nil),             // 5: openchat.rtc.SignalSendCustomSignalResp
	(*SignalOnStreamChangeReq)(nil),                // 6: openchat.rtc.SignalOnStreamChangeReq
	(*SignalResp)(nil),                             // 7: openchat.rtc.SignalResp
	(*InvitationInfo)(nil),                         // 8: openchat.rtc.InvitationInfo
	(*SignalInviteReq)(nil),                        // 9: openchat.rtc.SignalInviteReq
	(*SignalInviteResp)(nil),                       // 10: openchat.rtc.SignalInviteResp
	(*SignalInviteInGroupReq)(nil),                 // 11: openchat.rtc.SignalInviteInGroupReq
	(*SignalInviteInGroupResp)(nil),                // 12: openchat.rtc.SignalInviteInGroupResp
	(*SignalCancelReq)(nil),                        // 13: openchat.rtc.SignalCancelReq
	(*SignalCancelResp)(nil),                       // 14: openchat.rtc.SignalCancelResp
	(*SignalAcceptReq)(nil),                        // 15: openchat.rtc.SignalAcceptReq
	(*SignalAcceptResp)(nil),                       // 16: openchat.rtc.SignalAcceptResp
	(*SignalHungUpReq)(nil),                        // 17: openchat.rtc.SignalHungUpReq
	(*SignalHungUpResp)(nil),                       // 18: openchat.rtc.SignalHungUpResp
	(*SignalRejectReq)(nil),                        // 19: openchat.rtc.SignalRejectReq
	(*SignalRejectResp)(nil),                       // 20: openchat.rtc.SignalRejectResp
	(*SignalGetRoomByGroupIDReq)(nil),              // 21: openchat.rtc.SignalGetRoomByGroupIDReq
	(*SignalGetRoomByGroupIDResp)(nil),             // 22: openchat.rtc.SignalGetRoomByGroupIDResp
	(*SignalOnRoomParticipantConnectedReq)(nil),    // 23: openchat.rtc.SignalOnRoomParticipantConnectedReq
	(*SignalOnRoomParticipantDisconnectedReq)(nil), // 24: openchat.rtc.SignalOnRoomParticipantDisconnectedReq
	(*SignalGetTokenByRoomIDReq)(nil),              // 25: openchat.rtc.SignalGetTokenByRoomIDReq
	(*SignalGetTokenByRoomIDResp)(nil),             // 26: openchat.rtc.SignalGetTokenByRoomIDResp
	(*SignalMessageAssembleReq)(nil),               // 27: openchat.rtc.SignalMessageAssembleReq
	(*SignalMessageAssembleResp)(nil),              // 28: openchat.rtc.SignalMessageAssembleResp
	(*SignalGetRoomsReq)(nil),                      // 29: openchat.rtc.SignalGetRoomsReq
	(*SignalGetRoomsResp)(nil),                     // 30: openchat.rtc.SignalGetRoomsResp
	(*GetSignalInvitationInfoReq)(nil),             // 31: openchat.rtc.GetSignalInvitationInfoReq
	(*GetSignalInvitationInfoResp)(nil),            // 32: openchat.rtc.GetSignalInvitationInfoResp
	(*GetSignalInvitationInfoStartAppReq)(nil),     // 33: openchat.rtc.GetSignalInvitationInfoStartAppReq
	(*GetSignalInvitationInfoStartAppResp)(nil),    // 34: openchat.rtc.GetSignalInvitationInfoStartAppResp
	(*SignalUser)(nil),                             // 35: openchat.rtc.SignalUser
	(*SignalRecord)(nil),                           // 36: openchat.rtc.SignalRecord
	(*FileRecord)(nil),                             // 37: openchat.rtc.FileRecord
	(*GetSignalInvitationRecordsReq)(nil),          // 38: openchat.rtc.GetSignalInvitationRecordsReq
	(*GetSignalInvitationRecordsResp)(nil),         // 39: openchat.rtc.GetSignalInvitationRecordsResp
	(*DeleteSignalRecordsReq)(nil),                 // 40: openchat.rtc.DeleteSignalRecordsReq
	(*DeleteSignalRecordsResp)(nil),                // 41: openchat.rtc.DeleteSignalRecordsResp
	(*sdkws.GroupInfo)(nil),                        // 42: openchat.sdkws.GroupInfo
	(*sdkws.GroupMemberFullInfo)(nil),              // 43: openchat.sdkws.GroupMemberFullInfo
	(*sdkws.PublicUserInfo)(nil),                   // 44: openchat.sdkws.PublicUserInfo
	(*sdkws.OfflinePushInfo)(nil),                  // 45: openchat.sdkws.OfflinePushInfo
	(*sdkws.RequestPagination)(nil),                // 46: openchat.sdkws.RequestPagination
	(*sdkws.UserInfo)(nil),                         // 47: openchat.sdkws.UserInfo
}
var file_rtc_rtc_proto_depIdxs = []int32{
	42, // 0: openchat.rtc.ParticipantMetaData.groupInfo:type_name -> openchat.sdkws.GroupInfo
	43, // 1: openchat.rtc.ParticipantMetaData.groupMemberInfo:type_name -> openchat.sdkws.GroupMemberFullInfo
	44, // 2: openchat.rtc.ParticipantMetaData.userInfo:type_name -> openchat.sdkws.PublicUserInfo
	0,  // 3: openchat.rtc.GetJoinTokenReq.metaData:type_name -> openchat.rtc.ParticipantMetaData
	9,  // 4: openchat.rtc.SignalReq.invite:type_name -> openchat.rtc.SignalInviteReq
	11, // 5: openchat.rtc.SignalReq.inviteInGroup:type_name -> openchat.rtc.SignalInviteInGroupReq
	13, // 6: openchat.rtc.SignalReq.cancel:type_name -> openchat.rtc.SignalCancelReq
	15, // 7: openchat.rtc.SignalReq.accept:type_name -> openchat.rtc.SignalAcceptReq
	17, // 8: openchat.rtc.SignalReq.hungUp:type_name -> openchat.rtc.SignalHungUpReq
	19, // 9: openchat.rtc.SignalReq.reject:type_name -> openchat.rtc.SignalRejectReq
	25, // 10: openchat.rtc.SignalReq.getTokenByRoomID:type_name -> openchat.rtc.SignalGetTokenByRoomIDReq
	10, // 11: openchat.rtc.SignalResp.invite:type_name -> openchat.rtc.SignalInviteResp
	12, // 12: openchat.rtc.SignalResp.inviteInGroup:type_name -> openchat.rtc.SignalInviteInGroupResp
	14, // 13: openchat.rtc.SignalResp.cancel:type_name -> openchat.rtc.SignalCancelResp
	16, // 14: openchat.rtc.SignalResp.accept:type_name -> openchat.rtc.SignalAcceptResp
	18, // 15: openchat.rtc.SignalResp.hungUp:type_name -> openchat.rtc.SignalHungUpResp
	20, // 16: openchat.rtc.SignalResp.reject:type_name -> openchat.rtc.SignalRejectResp
	26, // 17: openchat.rtc.SignalResp.getTokenByRoomID:type_name -> openchat.rtc.SignalGetTokenByRoomIDResp
	8,  // 18: openchat.rtc.SignalInviteReq.invitation:type_name -> openchat.rtc.InvitationInfo
	45, // 19: openchat.rtc.SignalInviteReq.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	0,  // 20: openchat.rtc.SignalInviteReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	8,  // 21: openchat.rtc.SignalInviteInGroupReq.invitation:type_name -> openchat.rtc.InvitationInfo
	45, // 22: openchat.rtc.SignalInviteInGroupReq.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	0,  // 23: openchat.rtc.SignalInviteInGroupReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	8,  // 24: openchat.rtc.SignalCancelReq.invitation:type_name -> openchat.rtc.InvitationInfo
	45, // 25: openchat.rtc.SignalCancelReq.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	0,  // 26: openchat.rtc.SignalCancelReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	8,  // 27: openchat.rtc.SignalAcceptReq.invitation:type_name -> openchat.rtc.InvitationInfo
	45, // 28: openchat.rtc.SignalAcceptReq.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	0,  // 29: openchat.rtc.SignalAcceptReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	8,  // 30: openchat.rtc.SignalHungUpReq.invitation:type_name -> openchat.rtc.InvitationInfo
	45, // 31: openchat.rtc.SignalHungUpReq.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	8,  // 32: openchat.rtc.SignalRejectReq.invitation:type_name -> openchat.rtc.InvitationInfo
	45, // 33: openchat.rtc.SignalRejectReq.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	0,  // 34: openchat.rtc.SignalRejectReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	8,  // 35: openchat.rtc.SignalGetRoomByGroupIDResp.invitation:type_name -> openchat.rtc.InvitationInfo
	0,  // 36: openchat.rtc.SignalGetRoomByGroupIDResp.participant:type_name -> openchat.rtc.ParticipantMetaData
	8,  // 37: openchat.rtc.SignalOnRoomParticipantConnectedReq.invitation:type_name -> openchat.rtc.InvitationInfo
	0,  // 38: openchat.rtc.SignalOnRoomParticipantConnectedReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	8,  // 39: openchat.rtc.SignalOnRoomParticipantDisconnectedReq.invitation:type_name -> openchat.rtc.InvitationInfo
	0,  // 40: openchat.rtc.SignalOnRoomParticipantDisconnectedReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	0,  // 41: openchat.rtc.SignalGetTokenByRoomIDReq.participant:type_name -> openchat.rtc.ParticipantMetaData
	3,  // 42: openchat.rtc.SignalMessageAssembleReq.signalReq:type_name -> openchat.rtc.SignalReq
	7,  // 43: openchat.rtc.SignalMessageAssembleResp.signalResp:type_name -> openchat.rtc.SignalResp
	22, // 44: openchat.rtc.SignalGetRoomsResp.roomList:type_name -> openchat.rtc.SignalGetRoomByGroupIDResp
	8,  // 45: openchat.rtc.GetSignalInvitationInfoResp.invitationInfo:type_name -> openchat.rtc.InvitationInfo
	45, // 46: openchat.rtc.GetSignalInvitationInfoResp.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	8,  // 47: openchat.rtc.GetSignalInvitationInfoStartAppResp.invitation:type_name -> openchat.rtc.InvitationInfo
	45, // 48: openchat.rtc.GetSignalInvitationInfoStartAppResp.offlinePushInfo:type_name -> openchat.sdkws.OfflinePushInfo
	35, // 49: openchat.rtc.SignalRecord.inviterUsers:type_name -> openchat.rtc.SignalUser
	46, // 50: openchat.rtc.GetSignalInvitationRecordsReq.pagination:type_name -> openchat.sdkws.RequestPagination
	47, // 51: openchat.rtc.GetSignalInvitationRecordsReq.JoinedUsers:type_name -> openchat.sdkws.UserInfo
	36, // 52: openchat.rtc.GetSignalInvitationRecordsResp.signalRecords:type_name -> openchat.rtc.SignalRecord
	27, // 53: openchat.rtc.RtcService.SignalMessageAssemble:input_type -> openchat.rtc.SignalMessageAssembleReq
	21, // 54: openchat.rtc.RtcService.SignalGetRoomByGroupID:input_type -> openchat.rtc.SignalGetRoomByGroupIDReq
	25, // 55: openchat.rtc.RtcService.SignalGetTokenByRoomID:input_type -> openchat.rtc.SignalGetTokenByRoomIDReq
	29, // 56: openchat.rtc.RtcService.SignalGetRooms:input_type -> openchat.rtc.SignalGetRoomsReq
	31, // 57: openchat.rtc.RtcService.GetSignalInvitationInfo:input_type -> openchat.rtc.GetSignalInvitationInfoReq
	33, // 58: openchat.rtc.RtcService.GetSignalInvitationInfoStartApp:input_type -> openchat.rtc.GetSignalInvitationInfoStartAppReq
	4,  // 59: openchat.rtc.RtcService.SignalSendCustomSignal:input_type -> openchat.rtc.SignalSendCustomSignalReq
	38, // 60: openchat.rtc.RtcService.GetSignalInvitationRecords:input_type -> openchat.rtc.GetSignalInvitationRecordsReq
	40, // 61: openchat.rtc.RtcService.DeleteSignalRecords:input_type -> openchat.rtc.DeleteSignalRecordsReq
	28, // 62: openchat.rtc.RtcService.SignalMessageAssemble:output_type -> openchat.rtc.SignalMessageAssembleResp
	22, // 63: openchat.rtc.RtcService.SignalGetRoomByGroupID:output_type -> openchat.rtc.SignalGetRoomByGroupIDResp
	26, // 64: openchat.rtc.RtcService.SignalGetTokenByRoomID:output_type -> openchat.rtc.SignalGetTokenByRoomIDResp
	30, // 65: openchat.rtc.RtcService.SignalGetRooms:output_type -> openchat.rtc.SignalGetRoomsResp
	32, // 66: openchat.rtc.RtcService.GetSignalInvitationInfo:output_type -> openchat.rtc.GetSignalInvitationInfoResp
	34, // 67: openchat.rtc.RtcService.GetSignalInvitationInfoStartApp:output_type -> openchat.rtc.GetSignalInvitationInfoStartAppResp
	5,  // 68: openchat.rtc.RtcService.SignalSendCustomSignal:output_type -> openchat.rtc.SignalSendCustomSignalResp
	39, // 69: openchat.rtc.RtcService.GetSignalInvitationRecords:output_type -> openchat.rtc.GetSignalInvitationRecordsResp
	41, // 70: openchat.rtc.RtcService.DeleteSignalRecords:output_type -> openchat.rtc.DeleteSignalRecordsResp
	62, // [62:71] is the sub-list for method output_type
	53, // [53:62] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_rtc_rtc_proto_init() }
func file_rtc_rtc_proto_init() {
	if File_rtc_rtc_proto != nil {
		return
	}
	file_rtc_rtc_proto_msgTypes[3].OneofWrappers = []any{
		(*SignalReq_Invite)(nil),
		(*SignalReq_InviteInGroup)(nil),
		(*SignalReq_Cancel)(nil),
		(*SignalReq_Accept)(nil),
		(*SignalReq_HungUp)(nil),
		(*SignalReq_Reject)(nil),
		(*SignalReq_GetTokenByRoomID)(nil),
	}
	file_rtc_rtc_proto_msgTypes[7].OneofWrappers = []any{
		(*SignalResp_Invite)(nil),
		(*SignalResp_InviteInGroup)(nil),
		(*SignalResp_Cancel)(nil),
		(*SignalResp_Accept)(nil),
		(*SignalResp_HungUp)(nil),
		(*SignalResp_Reject)(nil),
		(*SignalResp_GetTokenByRoomID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtc_rtc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rtc_rtc_proto_goTypes,
		DependencyIndexes: file_rtc_rtc_proto_depIdxs,
		MessageInfos:      file_rtc_rtc_proto_msgTypes,
	}.Build()
	File_rtc_rtc_proto = out.File
	file_rtc_rtc_proto_rawDesc = nil
	file_rtc_rtc_proto_goTypes = nil
	file_rtc_rtc_proto_depIdxs = nil
}
